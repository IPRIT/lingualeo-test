@import "variables";
@import "functions";
@import "classes";

@mixin bem-block($block, $at-root: true) {
  $scope: unwrap-scope(&);
  $is-class: str-index($block, unquote('.'));
  $selector: $block;
  @if (not $is-class) {
    $selector: unquote('.')#{$bem-block-prefix}#{$selector};
  }
  @debug $selector;
  @if ($at-root) {
    @at-root #{$selector} {
      @content;
    }
  } @else {
    #{$selector} {
      @content;
    }
  }
}

@mixin bem-element($element, $at-root: true) {
  $scope: unwrap-scope(&);
  $selector: #{$scope}#{$bem-element-prefix}#{$element};
  @if ($at-root) {
    @at-root #{$selector} {
      @content;
    }
  } @else {
    #{$selector} {
      @content;
    }
  }
}

@mixin bem-modifier($modifier, $at-root: true) {
  $scope: unwrap-scope(&);
  $selector: #{$scope}#{$bem-modifier-prefix}#{$modifier};
  @if ($at-root) {
    @at-root &#{$selector} {
      @content;
    }
  } @else {
    &#{$selector} {
      @content;
    }
  }
}

@mixin bem($block: null, $element: null, $modifier: null, $at-root: true) {
  @if ($element and $modifier) {
    @include bem-element($element, $at-root) {
      @include bem-modifier($modifier, $at-root) {
        @content;
      }
    }
  } @else if ($element) {
    @include bem-element($element, $at-root) {
      @content;
    }
  } @else if ($modifier) {
    @include bem-modifier($modifier, $at-root) {
      @content;
    }
  } @else {
    @include bem-block($block, $at-root) {
      @content;
    }
  }
}

@mixin input-placeholder-color($color, $target-pseudo-colors: (), $contentInBase: true) {
  $pseudos: '::-webkit-input-placeholder', ':-moz-placeholder', '::-moz-placeholder',
    ':-ms-input-placeholder',  '::-webkit-input-placeholder';

  @each $pseudo in $pseudos {
    &#{$pseudo} {
      color: $color;
      @if ($contentInBase) {
        @content;
      }
    }
    @each $target-pseudo, $target-pseudo-color in $target-pseudo-colors {
      &:#{$target-pseudo}#{$pseudo} {
        color: $target-pseudo-color;
        @if (not $contentInBase) {
          @content;
        }
      }
    }
  }
}